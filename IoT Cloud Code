/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/8e650f96-8893-40a7-84ff-f1f006ca31ff 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String mailStatus;
  float distance;
  bool status;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#define MAX_RANG 520
#define ADC 1023.0 

int ultrasonic = A5; 

int magnet = 2; 
int LED = 4; 
int detect = 0; 

float d1; 

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  pinMode(magnet, INPUT);
  pinMode(LED, OUTPUT);

  // Initial value
  d1 = 43; 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

float sensity; 

void loop() {
  ArduinoCloud.update();
   sensity = analogRead(ultrasonic);
    detect = digitalRead(magnet);  

    distance = (sensity * MAX_RANG / ADC);
    Serial.print("Reading... ");
    Serial.print(distance);
    Serial.println(" cm");
    //delay(5000);

//************************************
    if (detect == HIGH) {            
    digitalWrite(LED, LOW);  //Close
    status = true; 
    d1 = distance;
    delay(500);
    } else {
    digitalWrite(LED, HIGH); //Open
    status = false; 
    delay(500);
    }
//*************************************
      
    if(d1 == distance && d1 <= distance + 4){
        Serial.println("Mailbox has been opened");
        

      }else if(d1 < (distance + 4)  ){
        Serial.println("Someone took your email");
        mailStatus = "Mail has been taken";
        

      }else if( (d1 > (distance - 4)) && status == true){
        Serial.println("Mail is here");
        mailStatus = "Mail is here";
       

      }
    

    Serial.print("D1 | Current Distance: ");
    Serial.print(d1);
    Serial.println(" cm");

}



/*
  Since Distance is READ_WRITE variable, onDistanceChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDistanceChange()  {
  // Add your code here to act upon Distance change
}

/*
  Since Status is READ_WRITE variable, onStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onStatusChange()  {
  // Add your code here to act upon Status change
}

/*
  Since Status2 is READ_WRITE variable, onStatus2Change() is
  executed every time a new value is received from IoT Cloud.
*/
void onStatus2Change()  {
  // Add your code here to act upon Status2 change
}

/*
  Since MailStatus is READ_WRITE variable, onMailStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMailStatusChange()  {
  // Add your code here to act upon MailStatus change
}
